"""
–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: 
1) –†–∞–∑–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ Python: https://jenyay.net/Programming/Argparse
2) –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ URL-–∞–¥—Ä–µ—Å–∞ –≤ Python: https://stackoverflow.com/questions/839994/extracting-a-url-in-python
3) Emoji: https://emojilo.com/ru/
4) –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ Python: https://habr.com/ru/post/483400/
5) How To Take A Screenshot Using Python & Selenium?: https://www.lambdatest.com/blog/python-selenium-screenshots/
6) –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å python –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤: https://stackoverflow.com/questions/11968689/python-multithreading-wait-till-all-threads-finished
7) –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä HTML-—Ñ–∞–π–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é Python: https://www.geeksforgeeks.org/creating-and-viewing-html-files-with-python/
8) Python: –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—É—é HTML —Ç–∞–±–ª–∏—Ü—É –∏–∑ pandas¬†DataFrame: https://alexeyseleznev.wordpress.com/2020/04/30/python-%D0%BA%D0%B0%D0%BA-%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D1%82%D1%8C-%D0%BE%D1%84%D0%BE%D1%80%D0%BC%D0%BB%D0%B5%D0%BD%D0%BD%D1%83%D1%8E-html-%D1%82%D0%B0%D0%B1%D0%BB%D0%B8%D1%86%D1%83-%D0%B8%D0%B7-pa/
9) HTML to IMAGE using Python: https://stackoverflow.com/questions/60598837/html-to-image-using-python
10) Output images to html using python: https://stackoverflow.com/questions/7389567/output-images-to-html-using-python
11) How to add html styling in html page in python: https://stackoverflow.com/questions/31419888/how-to-add-html-styling-in-html-page-in-python
12) –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑ PyCharm community c CSS: https://habr.com/ru/post/691892/
13) How can I take a screenshot/image of a website using Python?: https://stackoverflow.com/questions/1197172/how-can-i-take-a-screenshot-image-of-a-website-using-python
14) –õ—É—á—à–∏–π —Å–ø–æ—Å–æ–± —Å–¥–µ–ª–∞—Ç—å —Å–Ω–∏–º–æ–∫ URL-–∞–¥—Ä–µ—Å–∞ –≤ Python: https://stackoverflow.com/questions/51000899/better-way-to-take-screenshot-of-a-url-in-python
15) HOWTO –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ä–µ—Å—É—Ä—Å–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞–∫–µ—Ç–∞ urllib: https://digitology.tech/docs/python_3/howto/urllib2.html?ysclid=ld40nfvga8813117223
16) How to store a jpg in an sqlite database with python: https://stackoverflow.com/questions/51301395/how-to-store-a-jpg-in-an-sqlite-database-with-python
17) How to Insert Image in SQLite using Python?: https://www.geeksforgeeks.org/how-to-insert-image-in-sqlite-using-python/
18) How to suppress console error/warning/info messages when executing selenium python scripts using chrome canary: https://stackoverflow.com/questions/46744968/how-to-suppress-console-error-warning-info-messages-when-executing-selenium-pyth
1() How to add image file in html using python: https://www.edureka.co/community/91405/how-to-add-image-file-in-html-using-python
"""

import os
import sys
import re  
import time
import keyboard  
import pandas  
import traceback
import urllib.request
from utils import *
from progress.bar import IncrementalBar
from threading import Thread
from selenium import webdriver

##### ----- ##### ----- ##### ----- ##### ----- ##### ----- ##### ----- ##### ----- #####
DEFAULT_PATH_DB         = "Project/databases/"
DEFAULT_PATH_FILES_URLS = "Project/files_urls/"
DEFAULT_PATH_HTML_PAGES = "Project/html_pages/"
CURRENT_PATH_DB         = DEFAULT_PATH_DB
CURRENT_PATH_FILES_URLS = DEFAULT_PATH_FILES_URLS
CURRENT_PATH_HTML_PAGES = DEFAULT_PATH_HTML_PAGES

MAX_FILES_DB            = 2
DEF_NAME_DB             = "app_db"
##### ----- ##### ----- ##### ----- ##### ----- ##### ----- ##### ----- ##### ----- #####

ALL_URLS = []
DATA_FOR_DB = []
DATAFRAME_PANDAS = pandas.DataFrame

GLOBAL_STATUS_BAR = None

def preparing_app_for_work():
    """ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã (–ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏, —Å–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã, —Å–æ–∑–¥–∞–µ–º –ë–î) """

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–æ–∫ –∏ —Å–æ–∑–¥–∞–µ–º –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    create_directory_if_not_exist(DEFAULT_PATH_DB)
    create_directory_if_not_exist(DEFAULT_PATH_FILES_URLS)
    create_directory_if_not_exist(DEFAULT_PATH_HTML_PAGES)

    # os.path.join(TEMP_DIR, "temp_SQLite.db")

# –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ terminal –≤—Å—Ç–∞–≤–∏—Ç—å: python Project/main.py "path_to_db" "path_to_files"
def get_args_from_console():
    """ –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (–ø–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è) """
    global CURRENT_PATH_DB, CURRENT_PATH_FILES_URLS

    argv_from_console = sys.argv
    if argv_from_console is None or len(argv_from_console) <= 1: 
        print(f'–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã')
        return

    print(f"–ü–æ–ª—É—á–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏: {argv_from_console}")
    if len(argv_from_console) >= 2: 
        CURRENT_PATH_DB = argv_from_console[1]
        print(f'üìÅ –ù–æ–≤—ã–π –ø—É—Ç—å: {CURRENT_PATH_DB=}')
    if len(argv_from_console) >= 3: 
        CURRENT_PATH_FILES_URLS = argv_from_console[2]
        print(f'üìÅ –ù–æ–≤—ã–π –ø—É—Ç—å: {CURRENT_PATH_FILES_URLS=}')

def get_urls_from_files():
    global ALL_URLS

    processed_urls = []
    try:
        print("'------> –ù–∞–∂–º–∏—Ç–µ <Esc> –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ <------'")
        is_esc = False
        # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –ø—É—Ç—è–º 
        for root, dirs, files in os.walk(CURRENT_PATH_FILES_URLS):
            if is_esc: break; 

            # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Ñ–∞–π–ª–∞–º –∏ –≤—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            bar = IncrementalBar(f'–û–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Ñ–∞–π–ª—ã –∏–∑ {root}', max = len(files))
            for name in files:
                try:
                    # time.sleep(1)
                    if is_esc: break; 

                    # –û–∂–∏–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏ Esc –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–µ–Ω–Ω–∏—è —Ü–∏–∫–ª–∞
                    if keyboard.is_pressed("Esc"):
                        print()
                        print("------> –ö–Ω–æ–ø–∫–∞ <Esc> –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ <------")
                        is_esc = True
                        break
                        
                    # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏ –Ω–∞—Ö–æ–¥–∏–º —Ç–∞–º URL
                    path_file = os.path.abspath(os.path.join(root, name))
                    lines_from_file = open(path_file).readlines()
                    for line in lines_from_file:
                        if is_esc: break; 
                        
                        regex=r"\b((?:https?://)?(?:(?:www\.)?(?:[\da-z\.-]+)\.(?:[a-z]{2,6})|(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|(?:(?:[0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|(?:[0-9a-fA-F]{1,4}:){1,7}:|(?:[0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|(?:[0-9a-fA-F]{1,4}:){1,5}(?::[0-9a-fA-F]{1,4}){1,2}|(?:[0-9a-fA-F]{1,4}:){1,4}(?::[0-9a-fA-F]{1,4}){1,3}|(?:[0-9a-fA-F]{1,4}:){1,3}(?::[0-9a-fA-F]{1,4}){1,4}|(?:[0-9a-fA-F]{1,4}:){1,2}(?::[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:(?:(?::[0-9a-fA-F]{1,4}){1,6})|:(?:(?::[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(?::[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(?:ffff(?::0{1,4}){0,1}:){0,1}(?:(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])|(?:[0-9a-fA-F]{1,4}:){1,4}:(?:(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])))(?::[0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])?(?:/[\w\.-]*)*/?)\b"
                        matches = re.findall(regex, line)
                        if matches is None or len(matches) <= 0: continue; 

                        for sel_url in matches:
                            processed_urls.append([sel_url, path_file]) 
                except Exception as ex:
                    traceback.print_exc(); print(ex); 

                bar.next()
            bar.finish()
    except Exception as ex:
        traceback.print_exc(); print(ex); 
    
    ALL_URLS.extend(processed_urls) 

    print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(processed_urls)}")
    print(f"üîó –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫:     {len(ALL_URLS)}")


def driver_setup(url_name: str) -> webdriver.Chrome:
    """ –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä, –∏–Ω–∞—á–µ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∞–π—Ç–∞ """
    options = webdriver.ChromeOptions()
    options.add_argument("--headless")                  # –ó–∞–ø—É—Å–∫–∞–µ—Ç Chrome –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ
    options.add_argument('--no-sandbox')                # –û–±—Ö–æ–¥ –º–æ–¥–µ–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –û–°
    options.add_argument('start-maximized')             # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
    options.add_argument('disable-infobars')            # –û—Ç–∫–ª—é—á–∞–µ–º –ø–ª–∞—à–∫—É, —á—Ç–æ –±—Ä–∞—É–∑–µ—Ä —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ü–û
    options.add_argument("--disable-extensions")        # –û—Ç–∫–ª—é—á–∞–µ–º –≤—ã–≤–æ–¥ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ –∫–æ–Ω–æ—Å–æ–ª—å
    options.add_argument('--ignore-certificate-errors') # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –æ–± —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞—Ö
    options.add_argument('--ignore-ssl-errors')         # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –æ–± ssl (Secure Sockets Layer ‚Äî —É—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—â—ë–Ω–Ω—ã—Ö —Å–æ–∫–µ—Ç–æ–≤)
    options.add_argument('--disable-dev-shm-usage') 
    options.add_argument('log-level=3')   
    options.add_argument('--headless')

    url_name_replaced = url_name.replace("/", "").replace("\\", "")
    path_log_file = f"Project/temp/_chrome_log_{url_name_replaced}.txt"
    LOCAL_WEB_DRIVER = webdriver.Chrome(chrome_options=options, service_log_path=path_log_file)
    return LOCAL_WEB_DRIVER

def get_data_from_urls():
    """ –ü–æ—Ç–æ–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Å—ã–ª–æ–∫"""
    try:
        # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Ç–æ–∫–æ–≤
        threads = []
        #drivers = []
        threads_bar = IncrementalBar(f'–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Ç–æ–∫–æ–≤', max = len(ALL_URLS))
        for url, file_path in ALL_URLS:
            #driver = driver_setup()
            thread = Thread(target=get_data_info_from_url, args=(url, file_path))
            #drivers.append(driver)
            threads.append(thread)
            threads_bar.next()
        threads_bar.finish()

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–±–æ—Ç—É –ø–æ—Ç–æ–∫–æ–≤
        create_threads_for_data(threads)

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –¥—Ä–∞–π–≤–µ—Ä–æ–≤
        #for driver in drivers:
        #    if driver is not None:
        #        driver.quit()
        #        driver = None

    except Exception as ex:
        traceback.print_exc(); print(ex); 

def create_threads_for_data(threads):
    try:
        # –û—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤
        global GLOBAL_STATUS_BAR
        GLOBAL_STATUS_BAR = IncrementalBar(f'üöÄ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Å—ã–ª–æ–∫', max = len(ALL_URLS))

        start_time = time.time()

        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏ –∂–¥–µ—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        threads_bar = IncrementalBar(f'‚öΩ –ó–∞–ø—É—â–µ–Ω–æ –ø–æ—Ç–æ–∫–æ–≤', max = len(ALL_URLS))
        for thread in threads:
            thread.start()
            threads_bar.next()
        threads_bar.finish()

        for thread in threads:
            thread.join()

        """
        from concurrent.futures import ThreadPoolExecutor
        with ThreadPoolExecutor(max_workers=5) as executor:
            futures = []
            for url, file_path in ALL_URLS:
                future = executor.submit(get_data_info_from_url, url, file_path)
                futures.append(future)
    
            # –∂–¥–µ–º, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∞—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∑–∞–¥–∞—á–∏
            for future in futures:
                future.result()
        """

        GLOBAL_STATUS_BAR.finish()
        GLOBAL_STATUS_BAR = None
        process_time = time.time() - start_time
        print(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ –∑–∞–Ω—è–ª–∞: {process_time} s")

    except Exception as ex:
        traceback.print_exc(); print(ex); 


def get_data_info_from_url(url_name, file_path):
    # test
    #time.sleep(1)
    #GLOBAL_STATUS_BAR.next()
    #return

    global DATA_FOR_DB

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–∞–π—Ç–æ–º
        response_status = 404  # 404 - Not Found
        try:
            opened_url = urllib.request.urlopen(url_name)
            response_status = opened_url.getcode()
        except urllib.error.HTTPError as http_ex:
            response_status = http_ex
        except Exception as ex:
            response_status = ex

        # 200 - Ok
        # –ü–æ–ª—É—á–∞–µ–º –°–∫—Ä–∏–Ω—à–æ—Ç –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã
        screenshot = 0
        process_time = 0
        if response_status == 200:
            try:
                start_time = time.time()                                ## —Ç–æ—á–∫–∞ –æ—Ç—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
                LOCAL_WEB_DRIVER = driver_setup(url_name)               # –û—Ç–∫—Ä—ã–≤–∞–µ–º Chrome
                try:
                    # –°–∞–º—ã–π –Ω–∞–∏–ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö, —Ç–∞–∫ –±—ã—Å—Ç—Ä–µ–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–¥
                    LOCAL_WEB_DRIVER.get(url_name)                          # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    time.sleep(1)                                           # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ 1 —Å–µ–∫
                    bytes_image = LOCAL_WEB_DRIVER.get_screenshot_as_png()  # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
                    screenshot = bytes_image                                # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
                except Exception as ex:
                    traceback.print_exc(); print(ex); 
                LOCAL_WEB_DRIVER.quit()                                 # –ó–∞–∫—Ä—ã–≤–∞–µ–º Chrome
                process_time = time.time() - start_time                 ## —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã
            except Exception as ex:
                traceback.print_exc(); print(ex); 

        DATA_FOR_DB.append([str(url_name), str(file_path), str(response_status), process_time, screenshot])
    except Exception as ex:
        traceback.print_exc(); print(ex); 

    try:
        if GLOBAL_STATUS_BAR is not None:
            GLOBAL_STATUS_BAR.next()
    except Exception as ex:
        pass

def update_db_info():
    """ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö """
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    db_conn, db_cur = delete_old_and_create_new_db(CURRENT_PATH_DB, MAX_FILES_DB, DEF_NAME_DB)
    for data in DATA_FOR_DB:
        sql = """INSERT INTO table_urls_stats (url_name, file_path, response_status, process_time, screenshot) VALUES (?,?,?,?,?)"""
        db_cur.execute(sql, (data[0], data[1], data[2], data[3], data[4]))
    db_conn.commit()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    global DATAFRAME_PANDAS
    DATAFRAME_PANDAS = pandas.read_sql_query("SELECT * FROM table_urls_stats", db_conn)
    print(DATAFRAME_PANDAS.head(20))

def create_html_pages():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ë–î
        copy_df = DATAFRAME_PANDAS.copy()

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –±–∞–π—Ç—ã –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è HTML
        import base64 
        data_screenshots_bytes_list = copy_df.screenshot
        data_screenshots_list = []
        threads_bar = IncrementalBar(f'üåÑ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç HTML', max = len(data_screenshots_bytes_list))
        for screenshot_bytes in data_screenshots_bytes_list:
            try:
                base64_encoded_image = base64.b64encode(bytes(screenshot_bytes)).decode("utf-8")
                screenshot = '<img src="data:image/png;base64,{0}">'.format(base64_encoded_image)
                data_screenshots_list.append(screenshot)
            except:
                pass
            threads_bar.next()
        threads_bar.finish()
        copy_df.screenshot = data_screenshots_list

        # –ò–∑ DataFrame to HTML 
        # (render_links=True - –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å url –≤ hyperlinks) 
        html_table = copy_df.to_html(render_links=True, escape=False)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫  '&lt;img src="data:image/png;base64,(byte array)"&gt;' -----> <img src="data:image/jpg;base64, (byte array)">
        #html_table = str(html_table).replace("&lt;", "<").replace("&gt;", ">")
        html_string = f'''
        <html>
            <head>
                <title>HTML Dataframe from DB</title>
            </head>

            <link rel="stylesheet" type="text/css" href="df_style.css"/>
            <body>
                <h2>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö</h2>
                {html_table}
            </body>
        </html>
        '''

        # –§–æ—Ä–º–∏—Ä—É–µ–º 
        f = open(os.path.join(DEFAULT_PATH_HTML_PAGES, 'index.html'), 'w')  
        f.write(html_string)                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–¥ –≤ —Ñ–∞–π–ª
        f.close()                           # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª

        print("üåê HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ë–î")
    except Exception as ex:
        traceback.print_exc(); print(ex); 

def main_program_logic():
    """ –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã """
    try:
        preparing_app_for_work()
        get_args_from_console()
        get_urls_from_files()
        get_data_from_urls()
        update_db_info()
        create_html_pages()
    except Exception as ex:
        traceback.print_exc(); print(ex); 


def hello_word():
    print() 
    print("#"*55) 
    print("üíª –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: –ê–Ω–∞–ª–∏–∑ URL —Å—Å—ã–ª–æ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤")
    print("üßë‚Äç –ê–≤—Ç–æ—Ä:      –õ–µ–æ–Ω–æ–≤ –í–ª–∞–¥–∏—Å–ª–∞–≤ –î–µ–Ω–∏—Å–æ–≤–∏—á 224-322")
    print("#"*55) 
    print() 

def end_word():
    print() 
    print("‚úÖ"*22) 
    print("‚úÖ   üíª –†–∞–±–æ—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ üíª    ‚úÖ")
    print("‚úÖ"*22) 
    print() 

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É
if __name__ == "__main__":
    hello_word() 
    main_program_logic()
    end_word()